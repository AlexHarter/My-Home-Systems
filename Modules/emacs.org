#+TITLE:emacs literate config
#+PROPERTY: header-args elisp :tangle yes :tangle ~/.emacs.d/init.el
* Why Emacs?
It started with me using Obsidian for notes.  After trying to find an adequately integrated Calendar solution, I quickly found that my true desire was something that could really absorb into itself every part of my digital life so that they can talk to each other.  This is exactly what Emacs does, and there is nothing else quite like it.

Ironically, Neovim is starting to become more Emacs-like, but it is held back by its lack of first-class GUI support.  For example, why would I want to write documents on a platform that can't do variable width fonts?
- Some other reasons:
  - I like Lisps.
  - I like the platform abstraction, i.e. whatever OS or distribution I use in the future, my Emacs will remain constant.
* Example Configs
** [[https://github.com/enzuru/.emacs.d][enzuru]]
** [[https://github.com/bbatsov/prelude][Prelude]]
** [[https://github.com/SystemCrafters/crafted-emacs][Crafted]]
** [[https://github.com/doomemacs/doomemacs][Doom]]
* Setup package manager: [[https://github.com/progfolio/elpaca][elpaca]]
- other options are package.el (built-in), and straight.el
  - I choose elpaca because it improves on straight, and I want declarative package management
  - I could also use Guix
    - I feel like I should know Scheme first
    - I may not want to be tied to Guix
- in this document, I could also have shell scripts for system dependencies
** install
#+BEGIN_SRC elisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+END_SRC
** disable package.el
#+BEGIN_SRC elisp :tangle ~/.emacs.d/early-init.el
  (setq package-enable-at-startup nil)
#+END_SRC
** use-package integration
#+BEGIN_SRC elisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
#+END_SRC
* exwm
#+BEGIN_SRC elisp :tangle no
  (use-package exwm
    :ensure t
    :config
    (require 'exwm)
    (require 'exwm-config)
    (exwm-config-example))
#+END_SRC
* keys
** evil
- The cool part about evil is that vi keybindings are widespread in other apps.
- I do get confused with evil and vanilla keybinds
#+BEGIN_SRC elisp :tangle no
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
  (use-package evil-org
    :ensure t)
#+END_SRC
** [[https://github.com/meow-edit/meow][meow]]
- Modal, but closer to vanilla keybinds
- Uses noun-verb like Helix and Kakoune, rather than verb-noun like Vim
#+BEGIN_SRC elisp
  (use-package meow
    :ensure t
    :config
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)))
    (require 'meow)
    (meow-setup)
    (meow-global-mode 1))
#+END_SRC
** TODO hydra
- Might be useful for LilyPond
  - I could even make a special one for editing Kyivan chant
#+begin_src elisp
  (use-package hydra
    :ensure t)
#+end_src
* customize emacs ui
** beacon
#+BEGIN_SRC elisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC
** suppress native comp warning messages
#+BEGIN_SRC elisp :tangle ~/.emacs.d/early-init.el
  (setq native-comp-async-report-warnings-errors nil)
#+END_SRC
** turn off visual elements
- this disables these before initializing to improve startup time
#+BEGIN_SRC elisp :tangle ~/.emacs.d/early-init.el
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
#+END_SRC
** misc built-in ui elements
*** TODO auto save
#+BEGIN_SRC elisp
  (use-package emacs
    :ensure nil ; disable elpaca for this expression
    :config
    (set-frame-parameter nil 'alpha-background 85)
    (add-to-list 'default-frame-alist '(alpha-background . 85))

    (add-to-list 'default-frame-alist
	     '(font . "CaskaydiaCove Nerd Font-16"))

    (setq inhibit-startup-message t) 
    (setq initial-scratch-message nil)

    (setq ring-bell-function #'ignore)

    (global-display-line-numbers-mode 1)
    (setq display-line-numbers 'relative))
#+END_SRC
** themes
*** modus
#+BEGIN_SRC elisp :tangle no
  (use-package modus-themes
    :ensure t)
#+END_SRC
*** ef
#+BEGIN_SRC elisp
  (use-package ef-themes
    :ensure t
    :demand t
    :config
    (load-theme 'ef-rosa t))
#+END_SRC
*** catppuccin
#+BEGIN_SRC elisp :tangle no
  (use-package catppuccin-theme
    :ensure t
    :demand t
    :config
    (load-theme 'catppuccin t))
#+END_SRC
** [[https://docs.projectile.mx/projectile/index.html][projectile]]
#+BEGIN_SRC elisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+END_SRC
** [[https://github.com/purcell/page-break-lines][page-break-lines]]
#+BEGIN_SRC elisp
  (use-package page-break-lines
    :ensure t
    :config
    (global-page-break-lines-mode 1))
#+END_SRC
** [[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]]
*** TODO customize the variable width font
#+BEGIN_SRC elisp
  (use-package mixed-pitch
    :ensure t
    :hook (org-mode . mixed-pitch-mode))
#+END_SRC
** emoji
*** DEBUG not all emojis are displaying correctly
#+BEGIN_SRC elisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode))
#+END_SRC
** [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]]
#+BEGIN_SRC elisp
  (use-package nerd-icons
    :ensure t)
#+END_SRC
** [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]
#+BEGIN_SRC elisp
  (use-package dashboard
    :ensure t
    :demand t
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-projects-backend 'projectile)
    (dashboard-startup-banner 'logo)
    (dashboard-center-content t)
    (dashboard-items '((bookmarks . 5)
		       (agenda    . 5)
		       (projects  . 5)
		       (recents   . 5)))
    (dashboard-display-icons-p t)     ; display icons on both GUI and terminal
    (dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t))
#+END_SRC
** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
- checkout prism as an alternative
#+BEGIN_SRC elisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** [[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]]
#+BEGIN_SRC elisp
(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+END_SRC
** DEBUG [[https://github.com/mickeynp/ligature.el][ligature]]
- appears to work only sometimes
#+BEGIN_SRC elisp
(use-package ligature
  :ensure t
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia and Fira Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode
                        '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                          ;; =:= =!=
                          ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                          ;; ;; ;;;
                          (";" (rx (+ ";")))
                          ;; && &&&
                          ("&" (rx (+ "&")))
                          ;; !! !!! !. !: !!. != !== !~
                          ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                          ;; ?? ??? ?:  ?=  ?.
                          ("?" (rx (or ":" "=" "\." (+ "?"))))
                          ;; %% %%%
                          ("%" (rx (+ "%")))
                          ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                          ;; |->>-||-<<-| |- |== ||=||
                          ;; |==>>==<<==<=>==//==/=!==:===>
                          ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                          "-" "=" ))))
                          ;; \\ \\\ \/
                          ("\\" (rx (or "/" (+ "\\"))))
                          ;; ++ +++ ++++ +>
                          ("+" (rx (or ">" (+ "+"))))
                          ;; :: ::: :::: :> :< := :// ::=
                          (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                          ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                          ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                          "="))))
                          ;; .. ... .... .= .- .? ..= ..<
                          ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                          ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                          ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                          ;; *> */ *)  ** *** ****
                          ("*" (rx (or ">" "/" ")" (+ "*"))))
                          ;; www wwww
                          ("w" (rx (+ "w")))
                          ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                          ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                          ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                          ;; << <<< <<<<
                          ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                          "-"  "/" "|" "="))))
                          ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                          ;; >> >>> >>>>
                          (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                          ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                          ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                       (+ "#"))))
                          ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                          ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                          ;; __ ___ ____ _|_ __|____|_
                          ("_" (rx (+ (or "_" "|"))))
                          ;; Fira code: 0xFF 0x12
                          ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
                          ;; Fira code:
                          "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
                          ;; The few not covered by the regexps.
                          "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+END_SRC
** set custom variables
#+BEGIN_SRC elisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+END_SRC
* [[https://orgmode.org/][org]]
- make a separate elisp file?
- do I use use-package for org itself?
#+BEGIN_SRC elisp
  (use-package org
    :ensure nil
    :config
    (setq org-directory "~/Files/")'
    (setq org-startup-folded t))
    (setq org-todo-keywords
	  '((sequence "PROJ-ACT" "TODO" "DEBUG" "|" "PROJ-IN" "WAIT" "PROJ-DONE" "DONE")))
    (setq org-tag-alist
	  '(;; Places
	    ("@home" . ?H)
	    ("@work" . ?W)

	    ;; Devices
	    ("@computer" . ?C)
	    ("@phone" . ?P)

	    ;; Activities
	    ("@planning" . ?n)
	    ("@programming" . ?p)
	    ("@music" . ?m)
	    ("@text" . ?t)
	    ("@email" . ?e)
	    ("@call" . ?c)))
     (setq org-agenda-files '("~/Files"))
#+END_SRC
** org-export
*** DEBUG [[https://orgmode.org/manual/LaTeX-Export.html#LaTeX-export][latex]]
- ox-latex is built-in to org-mode
  - how should I configure it, then?
#+BEGIN_SRC elisp :tangle no
  (use-package ox-latex
    :ensure nil)
#+END_SRC
*** cv
- Execute once:
#+BEGIN_SRC shell :tangle no
mkdir ~/.emacs.d/manual-packages/
cd ~/.emacs.d/manual-packages
git clone https://gitlab.com/Titan-C/org-cv.git
#+END_SRC

#+BEGIN_SRC elisp
(use-package ox-moderncv
    :load-path "~/.emacs.d/manual-packages/org-cv/"
    :init (require 'ox-moderncv))
#+END_SRC
** org-babel
*** lilypond
** [[https://github.com/minad/org-modern][org-modern]]
- I could consider mixing with [[https://github.com/rougier/svg-tag-mode][svg-tag-mode]]
#+BEGIN_SRC elisp
  (use-package org-modern
    :ensure t
    :config
    (with-eval-after-load 'org (global-org-modern-mode)))
#+END_SRC
** [[https://github.com/bastibe/org-journal][org-journal]]
#+BEGIN_SRC elisp
  (use-package org-journal
    :ensure t
    :defer t
    :init
    ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "C-c j ")
    :config
    (setq org-journal-dir "~/Family-Notes/Journal/Alex/"
	  org-journal-date-format "%A, %d %B %Y"
	  org-journal-file-type 'daily))
	  #+END_SRC
** [[https://www.orgroam.com/][org-roam]]
- I don't think I have a use for org-roam yet
#+BEGIN_SRC elisp :tangle no
  (use-package org-roam
    :ensure t)
#+END_SRC
** TODO [[https://protesilaos.com/emacs/denote][denote]]
- consider as an alternative to org-roam
#+BEGIN_SRC elisp
  (use-package denote
    :ensure t
    :config
    (setq denote-directory "~/Files")
#+END_SRC
** [[https://github.com/marcinkoziej/org-pomodoro][org-pomodoro]]
#+BEGIN_SRC elisp
  (use-package org-pomodoro
    :ensure t)
#+END_SRC
** [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]]
- I don't think this is working
#+BEGIN_SRC elisp
  (use-package org-auto-tangle
    :ensure t
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+END_SRC
** TODO org-timeblock
#+BEGIN_SRC elisp :tangle no
  (use-package org-timeblock
    :ensure t)  
#+END_SRC
** org-transclusion
#+BEGIN_SRC elisp
  (use-package org-transclusion
    :ensure t)
#+END_SRC
** TODO [[https://github.com/arnm/ob-mermaid][ob-mermaid]]
** TODO openwith-mode
- useful if I want to open a file from emacs that emacs can't display properly, e.g. mp4 or html
- I may also want to use this to open code where I'd rather use a specialized tool, e.g. Frescobaldi for LilyPond
#+BEGIN_SRC elisp
  (use-package openwith
    :ensure t
    :config
      (when (require 'openwith nil 'noerror)
	(setq openwith-associations
	      (list
	       (list (openwith-make-extension-regexp
		      '("mpg" "mpeg" "mp3" "mp4"
			"avi" "wmv" "wav" "mov" "flv"
			"ogm" "ogg" "mkv"))
		     "vlc"
		     '(file))
	       ;;(list (openwith-make-extension-regexp
	       ;;       '("xbm" "pbm" "pgm" "ppm" "pnm"
	       ;;         "png" "gif" "bmp" "tif" "jpeg" "jpg"))
	       ;;      "geeqie"
	       ;;      '(file))
	       (list (openwith-make-extension-regexp
		      '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
		     "libreoffice"
		     '(file))
	       ;;'("\\.lyx" "lyx" (file))
	       ;;'("\\.chm" "kchmviewer" (file))
	       ;;(list (openwith-make-extension-regexp
	       ;;       '("pdf" "ps" "ps.gz" "dvi"))
	       ;;      "okular"
	       ;;      '(file))
	       ))
	(openwith-mode 1)))
#+END_SRC
** DEBUG [[https://titan-c.gitlab.io/org-cv/][org-cv]]
- supports moderncv, awesomecv, and altacv
- I still love the idea, but I'm having issues getting this to work correctly
#+BEGIN_SRC elisp
  (use-package ox-altacv
    :ensure (:host gitlab :repo "Titan-C/org-cv"))
#+END_SRC
** obsidian.el
#+BEGIN_SRC elisp
  (use-package obsidian
    :ensure t)
#+END_SRC
* coding
** vterm
#+BEGIN_SRC elisp
  (use-package vterm
    :ensure t)
#+END_SRC
** TODO C
** python
- there are many python packages for emacs
- [[https://realpython.com/emacs-the-best-python-editor/][RealPython guide]]
- [[https://www.joseferben.com/posts/switching_from_elpy_to_anaconda_mode][Blog post: migrating from elpy to anaconda mode]]
*** [[https://github.com/pythonic-emacs/anaconda-mode][anaconda-mode]]
- anaconda-mode is the only package that Prelude uses
#+BEGIN_SRC elisp
  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode))
#+END_SRC
*** TODO jupyter
*** hy
#+BEGIN_SRC elisp
(use-package hy-mode
  :ensure t)
#+END_SRC
** lisps
- grouping these because they share a lot
*** TODO elisp
*** TODO guile scheme
- [[https://guix.gnu.org/en/manual/devel/en/html_node/The-Perfect-Setup.html][The Perfect Setup]]
*** TODO common lisp
* publishing
** tex
*** auctex
- Is this already bundled?
#+BEGIN_SRC elisp
  (use-package auctex
    :ensure t)
#+END_SRC
** [[https://github.com/vedang/pdf-tools][pdf-tools]]
#+BEGIN_SRC elisp
  (use-package pdf-tools
    :ensure t)
#+END_SRC
** [[https://jsrjenkins.github.io/gregorio-mode/][gregorio-mode]]
- [[https://gregorio-project.github.io/][gregorio project]]
  - can I set this to load 
#+BEGIN_SRC elisp
  (use-package gregorio-mode
    :ensure t)
#+END_SRC
** [[http://lilypond.org/][lilypond]]
- load this elisp because it is provided by the lilypond package rather than an emacs repo
  - Can I set it to only load when opening LilyPond files?
  - can I use use-package for this?
#+BEGIN_SRC elisp
  (use-package lilypond-mode
    :load-path "site-lisp/lilypond-init")
#+END_SRC
** TODO [[https://github.com/kaction-emacs/typst-ts-mode][typst]]
- [X] execute once:
#+BEGIN_SRC elisp :tangle no
  (add-to-list 'treesit-language-source-alist
	       '(typst "https://github.com/uben0/tree-sitter-typst"))
  (treesit-install-language-grammar 'typst)
#+END_SRC
#+BEGIN_SRC elisp
  (use-package typst-ts-mode
    :ensure (:type git :host sourcehut :repo "meow_king/typst-ts-mode" :files (:defaults "*.el"))
    :custom
    ;; don't add "--open" if you'd like `watch` to be an error detector
    (typst-ts-mode-watch-options "--open")
  
    ;; experimental settings (I'm the main dev, so I enable these)
    (typst-ts-mode-enable-raw-blocks-highlight t)
    (typst-ts-mode-highlight-raw-blocks-at-startup t))
#+END_SRC
** anki
#+BEGIN_SRC elisp
  (use-package anki-mode
    :ensure t)
#+END_SRC
