#+TITLE:emacs literate config
#+PROPERTY: header-args elisp :tangle yes :tangle ~/.config/emacs/init.el
* mkdir
#+BEGIN_SRC shell :tangle no
mkdir ~/.config/emacs/
#+END_SRC
* Setup package manager: [[https://github.com/progfolio/elpaca][elpaca]]
- other options are package.el (built-in), and straight.el
  - I choose elpaca because it improves on straight, and I want declarative package management
  - I believe I could also use Guix, but I feel like I should know Scheme first
- in this document, I could also have shell scripts for system dependencies
** install
#+BEGIN_SRC elisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+END_SRC
** disable package.el
#+BEGIN_SRC elisp :tangle ~/.config/emacs/early-init.el
  (setq package-enable-at-startup nil)
#+END_SRC
** use-package integration
#+BEGIN_SRC elisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
#+END_SRC
* customize emacs ui
** suppress native comp warning messages
#+BEGIN_SRC elisp :tangle ~/.config/emacs/early-init.el
  (setq native-comp-async-report-warnings-errors nil)
#+END_SRC
** turn off visual elements
- this disables these before initializing to improve startup time
#+BEGIN_SRC elisp :tangle ~/.config/emacs/early-init.el
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
#+END_SRC
** misc built-in ui elements
#+BEGIN_SRC elisp
  (use-package emacs
    :ensure nil ; disable elpaca for this expression
    :config
    (set-frame-parameter nil 'alpha-background 85)
    (add-to-list 'default-frame-alist '(alpha-background . 85))

    (setq inhibit-startup-message t) 
    (setq initial-scratch-message nil)

    (setq ring-bell-function #'ignore)

    ;(menu-bar-mode -1)
    ;(tool-bar-mode -1)
    ;(scroll-bar-mode -1)

    (global-display-line-numbers-mode 1)
    (setq display-line-numbers 'relative))

    (add-to-list 'default-frame-alist
	     '(font . "Iosevka Nerd Font-16"))
#+END_SRC
** theme: catppuccin
#+BEGIN_SRC elisp
  (use-package catppuccin-theme
    :ensure t
    :demand t
    :config
    (load-theme 'catppuccin t))
#+END_SRC
** [[https://docs.projectile.mx/projectile/index.html][projectile]]
#+BEGIN_SRC elisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+END_SRC
** [[https://github.com/purcell/page-break-lines][page-break-lines]]
#+BEGIN_SRC elisp
  (use-package page-break-lines
    :ensure t
    :config
    (global-page-break-lines-mode 1))
#+END_SRC
** [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]]
#+BEGIN_SRC elisp
  (use-package nerd-icons
    :ensure t)
#+END_SRC
** [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]
#+BEGIN_SRC elisp
  (use-package dashboard
    :ensure t
    :demand t
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t))
    (setq dashboard-items '((recents   . 5)
			    (bookmarks . 5)
			    (projects  . 5)
			    (agenda    . 5)
			    (registers . 5)))
    (setq dashboard-display-icons-p t)     ; display icons on both GUI and terminal
    (setq dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
#+END_SRC
** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
#+BEGIN_SRC elisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** [[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]]
#+BEGIN_SRC elisp
(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+END_SRC
** [[https://github.com/mickeynp/ligature.el][ligature]]
#+BEGIN_SRC elisp
(use-package ligature
  :ensure t
  :config
  ;; Enable all Iosevka ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                       "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                       "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                       ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+END_SRC
* set custom variables
#+BEGIN_SRC elisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+END_SRC
* [[https://orgmode.org/][org]]
- make a separate elisp file?
- do I use use-package for org itself?
#+BEGIN_SRC elisp
  (use-package org
    :ensure nil
    :config
    (setq org-directory "~/Family-Notes/")'
    (setq org-startup-folded 'overview))
    (setq org-todo-keywords
	  '((sequence "TODO" "DEBUG" "|" "DONE" "WAIT")))
#+END_SRC
** [[https://github.com/minad/org-modern][org-modern]]
- I could consider mixing with [[https://github.com/rougier/svg-tag-mode][svg-tag-mode]]
#+BEGIN_SRC elisp
  (use-package org-modern
    :ensure t
    :config
    (with-eval-after-load 'org (global-org-modern-mode)))
#+END_SRC
** [[https://github.com/bastibe/org-journal][org-journal]]
#+BEGIN_SRC elisp
  (use-package org-journal
    :ensure t
    :defer t
    :init
    ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "C-c j ")
    :config
    (setq org-journal-dir "~/Family-Notes/Journal - Alex/"
	  org-journal-date-format "%A, %d %B %Y"
	  org-journal-file-type 'daily))
	  #+END_SRC
** [[https://www.orgroam.com/][org-roam]]
#+BEGIN_SRC elisp
  (use-package org-roam
    :ensure t)
#+END_SRC
** [[https://github.com/marcinkoziej/org-pomodoro][org-pomodoro]]
#+BEGIN_SRC elisp
  (use-package org-pomodoro
    :ensure t)
#+END_SRC
** [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]]
#+BEGIN_SRC elisp
(use-package org-auto-tangle
  :ensure t
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+END_SRC
** org-timeblock
** org-transclusion
** ob-mermaid
** openwith-mode
* coding
** TODO C
** python
- [[https://github.com/pythonic-emacs/anaconda-mode][anaconda-mode]]
#+BEGIN_SRC elisp
  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode))
#+END_SRC
*** TODO jupyter
** TODO elisp
** TODO scheme
* publishing
** [[https://github.com/vedang/pdf-tools][pdf-tools]]
#+BEGIN_SRC elisp
  (use-package pdf-tools
    :ensure t)
#+END_SRC
** [[https://jsrjenkins.github.io/gregorio-mode/][gregorio-mode]]
- [[https://gregorio-project.github.io/][gregorio project]]
  - can I set this to load 
#+BEGIN_SRC elisp
  (use-package gregorio-mode
    :ensure t)
#+END_SRC
** [[http://lilypond.org/][lilypond]]
- we load this elisp because it is provided by the lilypond package rather than an emacs repo
  - Can I set it to only load when opening LilyPond files?
  - can I use use-package for this?
#+BEGIN_SRC elisp
  (load "lilypond-init.el")
#+END_SRC
